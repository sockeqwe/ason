package com.hannesdorfmann.ason.processor.generator;

import com.hannesdorfmann.ason.Ason;
import com.hannesdorfmann.ason.Config;
import com.hannesdorfmann.ason.processor.repacked.com.squareup.javawriter.JavaWriter;
import com.hannesdorfmann.ason.stream.JsonReader;
import com.hannesdorfmann.ason.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;

/**
 * @author Hannes Dorfmann
 */
public class JsonClass {

  private Config config;
  private TypeElement field;
  private String packageName;

  private Set<JsonProperty> properties = new HashSet<JsonProperty>();
  private JsonProperty inheritance;

  public JsonClass(TypeElement field, String packageName, Config config) {
    this.field = field;
    this.config = config;
    this.packageName = packageName;
  }

  public boolean containsProperty(String propertyName) {
    return properties.contains(propertyName);
  }

  public JsonClass addProperty(JsonProperty property) {
    properties.add(property);
    return this;
  }

  public String getAdapterClassName() {
    return field.getSimpleName().toString() + Ason.TYPE_ADAPTER_SUFFIX;
  }

  public void writeJavaClass(JavaWriter jw) throws IOException {

    String originClassName = field.getSimpleName().toString();

    jw.emitSingleLineComment("Generated by Ason. Do not modify!");
    jw.emitPackage(packageName);
    jw.emitEmptyLine();

    jw.emitImports(IOException.class, Ason.class, Config.class, JsonReader.class, JsonWriter.class);

    jw.beginType(getAdapterClassName(), "class", EnumSet.of(Modifier.PUBLIC),
        "TypeAdapter<" + originClassName + ">", null);

    jw.emitEmptyLine();
    jw.emitField("Config", "annotatedConfig", EnumSet.of(Modifier.PROTECTED));
    jw.emitEmptyLine();

    // Constructor
    jw.beginConstructor(EnumSet.of(Modifier.PUBLIC));
    if (config != null) {
      jw.emitStatement("annotatedConfig = new Config()");
      jw.emitStatement(
          "annotatedConfig.ignoreUnknownJsonProperty = " + config.ignoreUnknownJsonProperty);
      jw.emitStatement("annotatedConfig.writeNullValues = " + config.writeNullValues);
    }
    jw.endConstructor();

    writeReadJson(originClassName, jw);
    writeWriteJson(originClassName, jw);
    jw.endType();
  }

  /**
   * Writes the read Json method
   *
   * @throws IOException
   */
  private void writeReadJson(String originClassName, JavaWriter jw) throws IOException {

    List<String> params = Arrays.asList(new String[] { "JsonReader", "in", "Ason", "ason" });
    List<String> throwing = Arrays.asList(new String[] { "IOException" });

    jw.beginMethod(originClassName, "read", EnumSet.of(Modifier.PUBLIC), params, throwing);

    // Check if annotated config should be used
    jw.emitEmptyLine();
    jw.emitStatement("Config config = Ason.getInstance().getConfig()");
    jw.beginControlFlow("if (annotatedConfig != null)");
    jw.emitStatement("config = annotatedConfig");
    jw.endControlFlow();

    jw.endMethod();
  }

  /**
   * Writes the write Json method
   *
   * @throws IOException
   */
  private void writeWriteJson(String originClassName, JavaWriter jw) throws IOException {

  }
}
